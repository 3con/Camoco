#!/usr/bin/env python3
import os
import pandas as pd 
import re
import igraph as ig
import numpy as np
import sys

from itertools import chain
from HapMap import HapMap
from RefGen import RefGen,RefGenBuilder
from Ontology import Ontology
from Locus import *
from COB import COB,COBBuilder
from Tools import *

from optparse import OptionParser


def main(args):
   
    parser = OptionParser()
    parser.add_option('--COB',dest='COBS',action='append',default=[], help="Names of COBs to perform trait-wise analyses on. Can be specified more than once, e.g. '--COB PAN --COB SAM' [default: []]")
    parser.add_option('--RefGen',dest='RefGen',default='Zm5bFGS', help='Name of RefGen to perform Gene mapping to. [default: Zm5bFGS]')
    parser.add_option('--traits',dest='traits', help="path to trait csv. Must have three columns: 'trait','chr','position'")
    parser.add_option('--flank-pos-limit',dest='flank_pos_limit',default=50000,type='int', help='The base pair limit in which to look for flanking genes around a SNP')
    parser.add_option('--flank-gene-limit',dest='flank_gene_limit',default=4,type='int', help='The maximum number of flanking genes allowed to be associated with SNP (half upstream, half downstream).')
    parser.add_option('--sep',dest='sep',default="\t",type='string',help='Default delimiter for trait file. [default: \\t]')
    parser.add_option('--out',dest='out',default=None,type='string',help="prefix for output files. Defaults to same prefix as Trait CSV.")
    parser.add_option('--num-bootstraps',dest='num_bootstraps',default=100,type='int',help="Number of bootstraps for each trait")
    parser.add_option('--groupby',dest='groupby',action='append',default=[])

    options,args = parser.parse_args(args)

    # assign output name if user too lazy
    if not options.out:
        options.out = os.path.splitext(options.traits)[0]

    RG = RefGen(options.RefGen)
    TraitSNPs = pd.read_csv(options.traits,sep=options.sep)
    RG.log("Analyzing {} Traits and {} SNPs",len(TraitSNPs[options.groupby].drop_duplicates()),len(TraitSNPs))
    
    networks = []
    ''' Setup '''
    for name in options.COBS:
        networks.append(COB(name))
    RG.log("Analyzing using {} Networks.",len(networks))
    
    # Add SNP Specific Columns
    TraitSNPs['FlankingGenes'] = [
            RG.flanking_genes(SNP(chrom,pos),pos_limit=options.flank_pos_limit,gene_limit=options.flank_gene_limit) for chrom,pos in TraitSNPs[["chr","pos"]].itertuples(index=False)
    ]
 
    # Perform Trait based analyses
    TraitStats=[]
    for name,df in TraitSNPs.groupby(options.groupby):
        RG.log('Analyzing trait "{}"',name)
        genes = set(chain.from_iterable(df.FlankingGenes))
        stats = {
            'Trait'         : name,
            'TraitSNPCount' : len(df),
            'TraitGeneCount' : len(genes),
            'TraitFlankingGenes' : ",".join(map(str,genes))
        }
        for cob in networks:
            # Do density and Trans density
            stats['{}_Density'.format(cob.name)] = cob.density(genes,trans_only=False)
            stats['{}_TransDensity'.format(cob.name)] = cob.density(genes)
            stats['{}_BS_Density'.format(cob.name)] = cob.bootstrap_density(genes,trans_only=False)
            stats['{}_BS_TransDensity'.format(cob.name)] = cob.bootstrap_density(genes)

        TraitStats.append(stats)
    TraitStats=pd.DataFrame(TraitStats)
     
    TraitStats.to_csv(options.out+"_TraitStats.csv",sep=options.sep,index=False)
    TraitSNPs.to_csv(options.out+"_TraitSNPs.csv",sep=options.sep,index=False)
    


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:])) 
