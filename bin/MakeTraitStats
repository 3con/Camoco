#!/usr/bin/env python3
import os
import pandas as pd 
import re
import igraph as ig
import numpy as np
import sys

from itertools import chain
from HapMap import HapMap
from RefGen import RefGen,RefGenBuilder
from Ontology import Ontology
from Locus import *
from COB import COB,COBBuilder
from Tools import *
from Camoco import Camoco

from optparse import OptionParser
from multiprocessing import Pool,Manager
import multiprocessing


def main(args):
    parser = OptionParser()
    parser.add_option('--COB', dest='COBS', action='append', default=list(), help="Names of COBs to perform trait-wise analyses on. Can be specified more than once, e.g. '--COB PAN --COB SAM' [default: []]")
    parser.add_option('--RefGen', dest='RefGen', default='Zm5bFGS', help='Name of RefGen to perform Gene mapping to. [default: Zm5bFGS]')
    parser.add_option('--traits', dest='traits', help="path to trait csv. Must have three columns: 'trait','chr','position'")
    parser.add_option('--flank-pos-limit', dest='flank_pos_limit', default=50000, type='int', help='The base pair limit in which to look for flanking genes around a SNP')
    parser.add_option('--flank-gene-limit',dest='flank_gene_limit',default=4,type='int', help='The maximum number of flanking genes allowed to be associated with SNP (half upstream, half downstream).')
    parser.add_option('--sep',dest='sep',default="\t",type='string',help='Default delimiter for trait file. [default: \\t]')
    parser.add_option('--out',dest='out',default=None,type='string',help="prefix for output files. Defaults to same prefix as Trait CSV.")
    parser.add_option('--num-bootstraps',dest='num_bootstraps',default=100,type='int',help="Number of bootstraps for each trait")
    parser.add_option('--groupby',dest='groupby',action='append',default=[],help='Column names in traits csv which to group traits by. Can be specified more than once')
    parser.add_option('--serial',dest='serial',action='store_true',default=True,help="Flag to turn off parallelization.")
    parser.add_option('--max-snps',dest='max_snps',default=None, type='int', help='The maximum number of loci used to map trait stats. SNPs are first ordered by --order-snps.')
    parser.add_option('--order-snps',dest='order_snps',default=None, type='string', help='The column in --traits csv used to sort SNPs (ascending)')
    parser.add_option('--chr-col',dest='chr_col',default='chr',help='Name of locus chromosome column')
    parser.add_option('--pos-col',dest='pos_col',default='pos',help='Name of locus position column')
    options,args = parser.parse_args(args)

    cam = Camoco()
    RG = RefGen(options.RefGen)
    # assign output name if user too lazy
    if not options.out:
        options.out = os.path.splitext(options.traits)[0]

    TraitSNPs = pd.read_csv(options.traits,sep=options.sep)
    cam.log("Analyzing {} Traits and {} SNPs",len(TraitSNPs[options.groupby].drop_duplicates()),len(TraitSNPs))
    
    ''' Setup '''
    shared = SharedObject()
    shared.options.update(options.__dict__)
    shared.log = cam.log
    for name in options.COBS:
        shared.networks.append(COB(name))
    
    cam.log("Analyzing using {} Networks.",len(shared.networks))
    # Add SNP Specific Columns
    TraitSNPs['FlankingGenes'] = [
            RG.flanking_genes(SNP(chrom,pos),pos_limit=options.flank_pos_limit,gene_limit=options.flank_gene_limit) for chrom,pos in TraitSNPs[[options.chr_col,options.pos_col]].itertuples(index=False)
    ]
 
    # Perform Trait based analyses
    if not options.serial:
        pool = Pool()
        TraitStats = pool.map(AnalyzeTrait,TraitSNPs.groupby(options.groupby))
    else:
        TraitStats=[]
        for name,df in TraitSNPs.groupby(options.groupby):
            stats = AnalyzeTrait((name,df,shared)) 
            TraitStats.append(stats)
     
    TraitStats=pd.DataFrame(TraitStats)
    TraitStats.index = TraitStats['Trait']
    TraitStats.to_csv(options.out+"_TraitStats.csv",sep=options.sep)
    TraitSNPs.to_csv(options.out+"_TraitSNPs.csv",sep=options.sep,index=False)
   
def AnalyzeTrait(tpl):
    name,df,shared = tpl

    if shared.options['max_snps']:
        if not shared.options['order_snps']:
            exit("Error: if you specify max_snps you must specify order_snps")
        df = df.sort(shared.options['order_snps'],ascending=True)
        df = df[0:min(len(df),int(shared.options['max_snps']))]

    genes = set(chain.from_iterable(df.FlankingGenes))
    shared.log('Analyzing trait "{}: {} snps with {} genes"'.format(name,len(df),len(genes)))
    stats = {
        'Trait'         : name,
        'TraitSNPCount' : len(df),
        'TraitGeneCount' : len(genes),
        'TraitFlankingGenes' : ",".join(map(str,genes))
    }
    for cob in shared.networks:
        # Do density and Trans density
        genes = [x for x in genes if x in cob]
        shared.log("Found {} genes in {}",len(genes),cob.name)
        stats['{}_Density'.format(cob.name)] = cob.density(genes,trans_only=False)
        stats['{}_TransDensity'.format(cob.name)] = cob.density(genes)
        stats['{}_BS_Density'.format(cob.name)] = cob.bootstrap_density(genes,trans_only=False)[0]
        stats['{}_BS_TransDensity'.format(cob.name)] = cob.bootstrap_density(genes)[0]
        stats['{}_Genes'.format(cob.name)] = ",".join([x.id for x in genes])
    return stats

class SharedObject(object):
    def __init__(self):
        self.manager = multiprocessing.Manager()
        self.lock = self.manager.Lock()
        self.options = self.manager.dict()
        self.networks = list()

