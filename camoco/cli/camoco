#!/usr/bin/env python3

import camoco as co
import sys
import os
import glob

import argparse

from camoco.cli.commands.plotGWAS import plot_gwas
from camoco.cli.commands.density import density
from camoco.cli.commands.locality import locality
from camoco.cli.commands.health import cob_health
from camoco.cli.commands.crossRef import crossref
from camoco.cli.commands.remove import remove 
from camoco.cli.commands.list import list_command
from camoco import cf


if __name__ == '__main__':
    '''--------------------------
        Main Arguments 
    --------------------------'''
    parser = argparse.ArgumentParser(
        epilog='Cache. Money. Corn.'
    )
    parser.add_argument(
        '--debug',action='store_true',default=False,
        help='Drop into ipdb when something bad happens.'
    )
    parser.add_argument(
        '--interactive',action='store_true',default=False,
        help='Initiate an ipdb session right before exiting.'
    )
    parser.add_argument(
        '--overlook',action='store_true',default=False,
        help='Skip analysis if files produced by --out exist.'
    )
    subparsers = parser.add_subparsers(
        title='Camoco CLI program',
        metavar='Available Commands',
        description='Use --help with each command for more info',
    )
    # Also allow the help message to be printed using the help command
    helpcmd = subparsers.add_parser('help',help='Prints this help message')
    helpcmd.set_defaults(func=lambda x: parser.print_help())
    parser.set_defaults(func=lambda x: parser.print_help())


    '''--------------------------
        list 
    --------------------------'''
    lstcmd = subparsers.add_parser(
        'list', 
        aliases=['ls'],
        help='List camoco datasets.' 
    )
    lstcmd.add_argument(
        'type', default=None,
        help=(
            'The type of dataset you want to list. e.g. GWAS. '
            'Also accepts SQLite wildcards.'    
        )
    )
    lstcmd.add_argument(
        'name', default=None,
        help = (
            'The name of the dataset you want to list. '
            'Also accepts SQLite wildcards.' 
        )
    )
    lstcmd.set_defaults(func=list_command)

    ''' --------------------------
        rm 
    --------------------------'''
    remove = subparsers.add_parser('rm',help='remove camoco dataset.')
    remove.add_argument('type',default=None)
    remove.add_argument('name',default=None)
    remove.add_argument('-f','--force',action='store_false',default=True)
    remove.set_defaults(func=remove)

    ''' --------------------------
        plotGWAS 
    --------------------------'''
    plotgwas = subparsers.add_parser('plotGWAS',help='Plot a GWAS dataset')
    # Data Set Arguments
    plotgwas.add_argument(
        '--cob',
        required=True,
        help='The camoco network to use.'
    )
    plotgwas.add_argument(
        '--gwas', 
        required=True,
        help='The camoco GWAS to use.'
    )
    plotgwas.add_argument(
        '--terms',
        nargs='*', 
        help='The term within the GWAS ontology to use. default: all',
        default=['all']
    )
    plotgwas.add_argument(
       '--candidate-window-size',default=50000,
       type=int,
       help=('The window size (in bp) for mapping effective SNPs to genes. '
             'default: 50000')
    )
    plotgwas.add_argument(
       '--candidate-flank-limit',default=2,
       type=int,
       help=('The number of flanking genes included in SNP to gene mapping. '
           'default: 2' )
    )
    plotgwas.add_argument(
        '--snp2gene', default='strongest',
        type=str,metavar='strongest',
        help=(
            'The SNP to gene mapping to use. Specifying multiple mappings '
            ' will result in multiple results. Must be one of: '
            "['effective','strongest'] "
            "default:'strongest' "
        )
    )
    plotgwas.add_argument(
        '--strongest-attr', default='pval', type=str,
        help=(
            'The locus attr used to determine which locus is the'
            'strongest locus. (defualt=pval).'
        )
    )
    plotgwas.add_argument(
        '--strongest-higher',action='store_false',default=True,
        help=(
            'Flag indicating the value in --strongest-attr is '
            'stronger if higher. Default behavior is to treat '
            'lower values as stronger (i.e. p-vals)'
        )
    )
    plotgwas.add_argument(
        '--out', default=sys.stdout,
        help='OutputFile Name (default: Standard Out)'
    )
    plotgwas.set_defaults(func=plot_gwas) 


    ''' --------------------------
        density 
    --------------------------'''
    densityCLI = subparsers.add_parser(
        'density',
        help='Calculate network density among GWAS results'
    )
    # Data Set Arguments
    densityCLI.add_argument(
        'cob',
        help='The camoco network to use.'
    )
    densityCLI.add_argument(
        'gwas', 
        help='The camoco GWAS to use.'
    )
    densityCLI.add_argument(
        '--terms',
        nargs='*', 
        help=(
            'The term within the ontology to use. If all, '
            'terms in gwas will be iteratively analyzed. '
            '(default: all)'
        ),
        default=['all']
    )
    densityCLI.add_argument(
        '--num-bootstraps', default=50,type=int, metavar=50,
        help=('The number of bootstraps to perform in order '
           'to estimate a null distribution. (default: 50)')
    )
    densityCLI.add_argument(
        '--candidate-window-size',default=10000, metavar=10000,
        type=int,
        help=('The window size, in bp, for mapping effective SNPs to genes. '
             '(default: 10000)')
    )
    densityCLI.add_argument(
        '--candidate-flank-limit',default=1, 
        metavar=1,type=int,
        help=(
            'The number of flanking genes included in SNP to gene mapping. '
            'on each side of the locus. (default: 2)' 
        )
    )
    densityCLI.add_argument(
        '--snp2gene', default='strongest',
        choices=['strongest','effective'],
        type=str, metavar='strongest',
        help=(
            'The SNP to gene mapping to use. Specifying multiple mappings '
            ' will result in multiple results. Must be in: '
            "['effective','strongest'] "
            "(default: strongest)"
        )
    )
    densityCLI.add_argument(
        '--strongest-attr', default='pval', type=str, metavar='pval',
        help=(
            'The locus attr used to determine which locus is the'
            'strongest locus. (defualt=pval).'
        )
    )
    densityCLI.add_argument(
        '--strongest-higher',action='store_false',default=True,
        help=(
            'Flag indicating the value in --strongest-attr is'
            'stronger if higher. Default behavior is to treat'
            'lower values as stronger (i.e. p-vals)'
        )
    )
    densityCLI.add_argument(
        '--gene-specific',action='store_true',default=False,
        help=(
            'Flag indicating whether or not to perform'
            'gene specific density.'
        )
    )
    densityCLI.add_argument(
        '--out', default=sys.stdout,
        help='OutputFile Name (default: Standard Out)'
    )
    densityCLI.set_defaults(func=density)

    ''' --------------------------
        locality
    --------------------------'''
    localityCLI = subparsers.add_parser(
        'locality',
        help='Calculate subnetwork locality',
        description=(
            'Calculate subnetwork locality. Creates a grid using permutable '
            'parameters (see --permutable) which interrogates locality.'
        )
    )
    # Data Set Arguments
    localityCLI.add_argument(
        'cob', 
        help='The camoco network to use.'
    )
    localityCLI.add_argument(
        'gwas',
        help='The camoco GWAS to use.'
    )
    localityCLI.add_argument(
        '--terms',
        nargs='*', 
        metavar='TERM',
        help='The term within the ontology to use. (default: all)',
        default=['all']
    )
    localityCLI.add_argument(
       '--num-bootstraps', default=100,type=int,metavar=100, 
       help='''The number of bootstraps to perform in order
             to estimate a null distribution.'''
    )
    localityCLI.add_argument(
       '--sd-envelope', default=2, type=int,metavar=2,
       help='''The number or standard deviations to 
           use for the regression window.'''
    )
    localityCLI.add_argument(
       '--regression-window-size', default=50, metavar=50,
       type=int, help='The number of items within a window.'
    )
    # SNP2Gene Mapping
    localityCLI.add_argument(
        '--snp2gene', default='strongest', type=str,
        metavar='strongest', choices=['strongest','effective'],
        help=(
            'The SNP to gene mapping to use. Specifying multiple mappings '
            ' will result in multiple results. Must be in: '
            "['effective','strongest'] "
            "(default:strongest)"
        )
    )
    localityCLI.add_argument(
        '--strongest-attr', default='pval', type=str,metavar='pval',
        help=(
            'The locus attribute used to determine which locus is the'
            'strongest locus. (defualt=pval).'
        )
    )
    localityCLI.add_argument(
        '--strongest-higher',action='store_false',default=True,
        help=(
            'Flag indicating the value in --strongest-attr is'
            'stronger if higher. Default behavior is to treat'
            'lower values as stronger (i.e. p-vals)'
        )
    )
    # Permutation parameters
    localityCLI.add_argument(
       '--min-fdr-degree', default=2,metavar=2,
       type=int, help='''The miniumum degree to be included 
       as true positive in FDR calculation.'''
    )
    localityCLI.add_argument(
       '--candidate-window-size',default=10000,metavar=10000,
       type=int,  
       help='The window size for mapping effective SNPs to genes.'
    )
    localityCLI.add_argument(
       '--candidate-flank-limit',default=1,metavar=1,
       type=int,
       help='The number of flanking genes (each side) included in SNP to gene mapping'
    )
    # Data Formatting Parameters
    localityCLI.add_argument(
        '--plot',action='store_true',
        default=False,help='Flag indicating to plot data.'
    )
    localityCLI.add_argument(
       '--out',default='.',
       type=str,help='Basename of output file (pngs and csvs will be produced.)'
    )
    localityCLI.set_defaults(func=locality)

    localityCLI.add_argument(
       '--sig-edge-zscore',default=None,
       type=float,
       help='If not None, redefine what a significant interaction score is. (defaut: 3)'
    )
    localityCLI.set_defaults(func=locality)


    ''' --------------------------
        Health
    --------------------------'''
    health = subparsers.add_parser('health',help='Generate COB Health Stats')
    health.add_argument('cob',default=None)
    health.add_argument('--out',default=None,help='Output file prefix.')
    health.add_argument(
        '--refgen',
        default=None,
        help='Global Refgen is necessary for some stats'        
    )
    health.add_argument(
        '--go',
        default=None,
        help='Perform Gene Ontology Statistics. (default: None)'
    )
    health.add_argument(
        '--num-bootstraps',
        default=100,
        type=int,
        help='Number of Bootstraps for pvalue stats.'
    )
    health.set_defaults(func=cob_health)


    '''----------------------------------
        Cross Reference
    -------------------------------------'''
    crossref = subparsers.add_parser('crossref',
        help=(
            'cross reference a set of networks'
            ' based on edge strength and go term density')
    )
    crossref.add_argument(
        'cobs',
        default=None,
        nargs='*',
        help='A list of COBs which to cross reference'
    )
    crossref.add_argument('--out',default=None,help='Output file name.')
    crossref.set_defaults(func=crossref)


    ''' -------------------------------------------------------------------
    # DO IT ---------------------------------------------------------------
    -----------------------------------------------------------------------'''
    args = parser.parse_args()
    # Add debug options
    if args.debug is True:
        from IPython.core import ultratb
        sys.excepthook = ultratb.FormattedTB(
            mode='Verbose', color_scheme='Linux', call_pdb=1
        )
    # SKip analyses that already happened (if --overlook is provided)
    if args.overlook is True and len(glob.glob(args.out+'*')):
        print("Skipping {}* because files already exist.".format(args.out))
    else:
        return_value = args.func(args)
        if args.interactive is True:
            from IPython.core import ultratb
            sys.excepthook = ultratb.FormattedTB(
                mode='Verbose', color_scheme='Linux', call_pdb=1
            )
            from camoco.Exceptions import CamocoInteractive
            raise CamocoInteractive()
        sys.exit(return_value)


